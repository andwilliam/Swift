//Big-O notation
//running time
//O(1) single unit of work
//linear time O(N)  
//array zero-indexed
let evenNumbers = [2,4,6,8]  //Int
let evenNumbers: [Int] = [2,4,6,8]
var subscribers: [String] = []
let allZeros = Array(repeating:0, count:5) //[0,0,0,0,0]
let vowels = ["A", "E", "I", "O", "U"] //string

//
var players = ["Alice", "Bob", "Cindy", "Dan"]
print(players.isEmpty) //false  isEmpty property
if players.count < 2 {
    print ("We need at least two players!")
} else {
    print("Let`s start!")
}

var currentPlayer = players.first

currentPlayer = players.min()
print(currentPlayer as Any)
//
func isElimonated(player: String) -> Bool {
    !players.contains(player)
}
print(isElimonated(player: "Bob")) //false
players[1...3].contains("Bob") //true


// appending elements
var players = ["Alice", "Bob", "Cindy", "Dan"]
players.append("Eli")
players += ["Gina"]

//insert elements
var players = ["Alice", "Bob", "Cindy", "Dan"]
players.insert("Frank", at:4) // zero-indexed

//removing elements
var removedPlayer = players.removeLast()
removedPlayer = players.remove(at:2)

//updating elements
var players = ["Alice", "Bob", "Cindy", "Dan"]
players[4] = ["Franklin"]

//moving elements
var players = ["Alice", "Bob", "Cindy", "Dan"]
let playerBob = players.remove(at: 1)
players.insert(playerBob, at: 0)
print(players)

//swapping elements
players.swapAt(1, 3)
print(players)

//sort elements
players.sort()


//accessing elements O(1)

//Inserting elements and Deleting elements   //  linear time O(n)
/*
Begain: add to the begaing of the array, shifting all of the elements over by one to make room
Middle: doing n/2 operations, called: O(n)
End: if there isn`t room, swift need to make space and copy entire array,take O(n). else take O(1)
*/ 

//searching for an element 

// Dictionaries key-value
//Unordered

var namesAndScores = ["Anna": 2, "Brain": 2, "Craig": 8, "Donna": 6]  //[String: Int]
var pairs: [String: Int] = [:]

//define its capacity
paris.reserveCapacity(20)

//accessing values through key
var namesAndScores = ["Anna": 2, "Brain": 2, "Craig": 8, "Donna": 6]
print(namesAndScores["Anna"]!) //2 retrun type is an optional, if doesn`t find the key ,it will return nil
print(namesAndScores["Greg"]) //nil
namesAndScores.isEmpty //false
namesAndScores.count //4


//adding value
var bobData = ["name": "Bob", "profession": "Card Player", "country": "USA"] //[String:String]
bobData.updateValue("CA", forKey: "State") //["State": "CA"]
bobData["city"] = "San Francisco"

//removing pairs
bobData.removeValue(forKey: "state") //keep the key and set the value to nil
bobData["city"] = nil //removes the key completely

// tuple
var namesAndScores = ["Anna": 2, "Brain": 2, "Craig": 8, "Donna": 6]
for (player, score) in namesAndScores {
    print ("\(player) - \(score)")
}
// or
var namesAndScores = ["Anna": 2, "Brain": 2, "Craig": 8, "Donna": 6]
for player in namesAndScores.keys {
    print("\(player) ", terminator: "")
}
print("")

//hash value

//sets
let setOne: Set<Int> = [1]
let someArray = [1,2,3,1]  // an array
var explicitSet: Set<Int> = [1,2,3,1]
var someSet = Set([1,2,3,1])
 
//accessing elements
print(someSet.contains(1)) //true
print(someSet.contains(4)) //false
someSet.insert(5)
someSet.remove(1)

