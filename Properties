//stored properties
struct Contact {
    var fullName: String
    var emailAddress: String
}
var person = Contact(fullName: "w.gong", emailAddress: "ggorvi@gmail.com")
person.fullName // w.gong
person.emailAddress // ggorvi@gmail.com

//using let to prevent a value from changing
struct Contact {
    var fullName: String
    let emailAddress: String
}

//computed properties
//read-only computed properties
//getter (read-write computed properties)
//setter  设置stored properties
//计算属性并不存储实际的值，而是提供一个getter和一个可选的setter来间接获取和设置其它属性
//计算属性一般只提供getter方法
//如果只提供getter，而不提供setter，则该计算属性为只读属性，并且可以省略get{}
//可选的setter，来间接获取和设置其他属性或变量的值
//
class Student {
    // 存储属性
    var age : Int = 0
    var name : String?

    var chineseScore : Double = 100.0
    var mathScore : Double = 100.0

    // 计算属性
    var averageScore : Double {
        get {
            return (chineseScore + mathScore) / 2
        }

        // 死循环，在内部又会调用set方法
        // newValue是系统分配的变量名,内部存储着新值
        set {
            self.averageScore = newValue
        }
    }
}


//
struct Point {
    var x = 0.0, y = 0.0
}//(x,y)
struct Size {
    var width = 0.0, height = 0.0
}//(width, height)
struct Rect {
    var origin = Point()
    var size = Size()
    var center: Point {
        get {
            let centerX = origin.x + (size.width/2)
            let centerY = origin.y + (size.height/2)
            return Point(x: centerX, y: centerY)
        }
        set(newCenter) {
            origin.x = newCenter.x - (size.width/2)
            origin.y = newCenter.y - (size.height/2)
        }
    }
}//origin(x0,y0) size(width, height) center(x1,y1)
var square = Rect(origin: Point(x: 0.0, y: 0.0), size: Size(width: 10.0, height: 10.0))
let initialSquareCenter = square.center
square.center = Point(x: 15.0, y: 15.0)
print("square.origin is now at (\(square.origin.x), \(square.origin.y))")

//suqareRoot()
//rounded()
struct TV {
    var height: Double
    var width: Double
    var diagonal: Int {
        let result= (height * height + width * width).squareRoot().rounded()
        return Int(result)
    }
}
var tv= TV(height: 53.93, width: 95.87)
tv.diagonal

//类属性
//类属性是与类相关联的，而不是与类的实例相关联
//所有的类和实例都共有一份类属性.因此在某一处修改之后,该类属性就会被修改
//类属性的设置和修改,需要通过类来完成
//类属性可以使用static来修饰
class Student  {
    // 存储属性
    var age : Int = 0
    var name : String?

    var chineseScore : Double = 0.0
    var mathScore : Double = 0.0
    // 计算属性
    var averageScore : Double {
       return (chineseScore + mathScore) / 2
    }
    //类属性
    static var englishScore: Double = 95.5
    Student.englishScore = 90.5
    print(Student.englishScore)//90.5

//lazy 懒加载属性
//结构体属于"值类型",当值类型的实例被声明为let的时候，它的所有属性也就成了let。
//延时加载存储属性,必须将延时加载属性声明成变量（使用 var 关键字）
lazy var importer = DataImporter() //延迟加载数据


class DataImporter {
    var fileName = "Data.txt"
}
class DataManager {
    lazy var importer = DataImporter()
    var data: [String] = []
}
let manager = DataManager()
manager.data.append("Some data")
manager.data.append("Some more data")

//属性观察器： 监控，响应属性值的变化
//willSet 之前调用
//didSet  之后调用

class StepCounter {
    var totalSteps: Int = 0 {
        willSet(newTotalSteps) {
            print("将totalSteps的值设置为\(newTotalSteps)")
        }
        didSet {
            if totalSteps > oldValue {
                print("增加了\(totalSteps - oldValue)")
            }
        }
    }
}
let StepCounter = StepCounter()
StepCounter.totalSteps = 200
StepCounter.totalSteps = 360
StepCounter.totalSteps = 896

//属性包装器
//线程安全检查，数据库存储
//wrappedValue 属性的结构体，类，枚举
@propertyWrapper
struct TwelveOrLess {
    private var number = 0    //仅在TwelveOrLess结构体内使用
    var wrappedValue: Int {
        get { return number() }
        set { number = min(newValue, 12) }
    }
}
struct SmallRectangle {
    @TwelveOrLess var height: Int
    @TwelveOrLess var width: Int
}
var rectangle = SmallRectangle()
print(rectangle.height)
rectangle.height = 10
print(rectangle.height)//10
rectangle.height = 24
print(rectangle.height)//12

//全局变量 局部变量



