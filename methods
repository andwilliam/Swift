//instance methods提供访问和修改instance properties
//Counter类的方法是：对动作发生次数计数
//Counter类定义了三个instances： increment()，increment(by amount: Int)， reset()
//Counter类声明了可变属性count，用来计数
class Counter {
    var count = 0
    func increment() {
        count += 1
    }
    func increment(by amount: Int) {
        count += amount
    }
    func reset() {
        count = 0
    }
}


/*

func increment() {
    self.count += 1
}
如果没有明确地写self，Swift 假定你是指当前实例的属性或者方法
*/

//self 属性

struct Point {
    var x = 0.0, y = 0.0
    func isToTheRightOf(x: Double) -> Bool {
        return self.x > x  //isToTheRightOf(x: Double)
    }
}
let somePoint = Point(x: 4.0, y: 5.0)
if somePoint.isToTheRightOf(x: 1.0) {
    print("This point is to the right of the line where x == 1.0")
}

//修改值类型
//某个特定的方法中修改结构体或者枚举的属性
//mutating func 
//可变方法 moveBy（x：y :) 

struct Point {
    var x = 0.0, y = 0.0  //允许修改属性必须声明var
    mutating func moveBy(x deltaX: Double, y deltaY: Double) {
        x += deltaX
        y += deltaY
    }
}
var somePoint = Point(x: 1.0, y: 1.0)
somePoint.moveBy(x: 2.0, y: 3.0)
print("The point is now at (\(somePoint.x), \(somePoint.y))")

//在可变方法中给 self 赋值
struct Point {
    var x = 0.0, y = 0.0
    mutating func moveBy(x deltaX: Double, y deltaY: Double) {
        self = Point(x: x + deltaX, y: y + deltaY)
    }
}

